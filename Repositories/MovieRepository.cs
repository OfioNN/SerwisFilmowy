using SerwisFilmowy.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.UI.Xaml;
using System.IO;
using System.Data;
using FirebirdSql.Data.FirebirdClient;


namespace SerwisFilmowy.Repositories {

    class MovieRepository : IMovieRepository {
        
        private static string folderPath = Path.Combine(Environment.CurrentDirectory, @"Databases");
        private static string dbPath = Path.Combine(folderPath, "MoviesDB.fdb");
        private static string connectionString = $@"Database={dbPath}; User=SYSDBA; Password=masterkey; ServerType=1;";

        public MovieRepository() {


            // Tworzenie folderu, jeśli nie istnieje
            if (!Directory.Exists(folderPath)) {
                Directory.CreateDirectory(folderPath);
            }

            // Tworzenie bazy danych, jeśli nie istnieje
            if (!File.Exists(dbPath)) {
                try {

                    FbConnection.CreateDatabase(connectionString);

                    // Połączenie z bazą danych
                    using (FbConnection connection = new FbConnection(connectionString)) {
                        try {
                            connection.Open();

                            if (connection.State == ConnectionState.Open) {

                                string dbQuery = "CREATE TABLE Movies (ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, TITLE CHARACTER VARYING(50), DIRECTOR CHARACTER VARYING(30), STAFF CHARACTER VARYING(60), DESCRIPTION CHARACTER VARYING(500), IMAGE BLOB);";

                                using (FbCommand command = new FbCommand(dbQuery, connection))
                                    command.ExecuteNonQuery();

                            }

                            connection.Close();

                        }
                        catch (Exception ex) {
                            Console.WriteLine($"Error: {ex.Message}");
                        }
                    }

                }
                catch (Exception ex) {
                    Console.WriteLine($"Error: {ex.Message}");
                }
            }

        }


        private bool IsDatabaseExist() {
            bool isExist = false;

            return isExist;
        }

        public bool Create(Movies movie) {
            bool isCreated = false;

            using (FbConnection connection = new FbConnection(connectionString)) {
                try {
                    connection.Open();

                    if (connection.State == ConnectionState.Open) {

                        string dbQuery = $"INSERT INTO Movies (TITLE, DIRECTOR, STAFF, DESCRIPTION, IMAGE) VALUES ('{movie.Title}', '{movie.Director}', '{movie.Genre}', '{movie.Description}', @Image);";

                        using (FbCommand command = new FbCommand(dbQuery, connection)) {

                            command.Parameters.Add("@Image", FbDbType.Binary).Value = movie.Image;

                            if (command.ExecuteNonQuery() == 1)
                                isCreated = true;
                        }


                    }

                    connection.Close();

                }
                catch (Exception ex) {
                    Console.WriteLine($"Error: {ex.Message}");
                }
            }

            return isCreated;
        }

        public Movies Read(int Id) {
            Movies movie = new Movies();

            return movie;
        }

        public List<Movies> ReadAll() {
            List<Movies> movies = new List<Movies>();

            return movies;
        }

        public bool Update(Movies movie) {
            bool isUpdated = false;

            return isUpdated;
        }

        public bool Delete(Movies movie) {
            bool isDeleted = false;

            return isDeleted;
        }
    }
}
